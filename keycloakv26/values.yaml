# ---------------------------------------------------------------------------------------------------------
# base configuration
nameOverride: "mediocre-app-keycloak"
fullnameOverride: "mediocre-app-keycloak"
namespace: "platform"
role: "application"

# ---------------------------------------------------------------------------------------------------------
# serviceaccount
serviceAccount:
  name: ""
  create: true
  automount: true

# ---------------------------------------------------------------------------------------------------------
# role
Role:
  rules:
    - apiGroups: [""]
      resources: ["configmaps","secrets"]
      verbs: ["list","get"]

# ---------------------------------------------------------------------------------------------------------
# statefulset
StatefulSet:
  podManagementPolicy: "OrderedReady"
  keycloak:
    image: "quay.io/keycloak/keycloak:26.2.5"
    args:  ["start"]
    resources:
      requests:
        memory: "500M"
        cpu: 0.25
      limits:
        memory: "2G"
        cpu: 1.0
    env:
      - name: KC_BOOTSTRAP_ADMIN_USERNAME
        value: "administrator"
      - name: KC_BOOTSTRAP_ADMIN_PASSWORD
        value: "T3st2025214"
      # In a production environment, add a TLS certificate to Keycloak to either end-to-end encrypt the traffic between
      # the client or Keycloak, or to encrypt the traffic between your proxy and Keycloak.
      # Respect the proxy headers forwarded by the reverse proxy
      # In a production environment, verify which proxy type you are using, and restrict access to Keycloak
      # from other sources than your proxy if you continue to use proxy header
      - name: KC_PROXY_HEADERS
        value: "xforwarded"
      - name: KC_HTTP_ENABLED
        value: "true"
      # In this explorative setup, no strict hostname is set.
      # For production environments, set a hostname for a secure setup.
      - name: KC_HOSTNAME_STRICT
        value: "false"
      - name: KC_HEALTH_ENABLED
        value: "true"
      - name: KC_CACHE
        value: 'ispn'
      # Use the Kubernetes configuration for distributed caches which is based on DNS
      - name: KC_CACHE_STACK
        value: 'kubernetes'
      # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
      # Needs to be unique for each Keycloak cluster
      - name: JAVA_OPTS_APPEND
        value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
      - name: KC_DB
        value: "postgres"
      - name: KC_DB_URL
        value: "jdbc:postgresql://mediocre-db-postgresql.platform.svc.cluster.local:5432/postgres"
      - name: KC_DB_SCHEMA
        value: "keycloak"
      - name: KC_DB_USERNAME
        value: "postgres"
      - name: KC_DB_PASSWORD
        value: "T3st2025214"
    ports:
      - name: http
        containerPort: 8080
    readinessProbe:
      httpGet:
        path: /realms/master
        port: 8080
    #startupProbe:
    # httpGet:
    #   path: /health/started
    #   port: 8080
    #readinessProbe:
    # httpGet:
    #   path: /health/ready
    #   port: 8080
    #livenessProbe:
    # httpGet:
    #   path: /health/live
    #   port: 8080
  imagePullSecrets:
    - name: "mediocre-ecr-login"     
  tolerations:
    - key: "platform/role"
      operator: "Equal"
      value: "application"
      effect: "NoExecute"        
  selector:
    matchLabels:
      platform/role: "application"

# ---------------------------------------------------------------------------------------------------------
# service
Service:
  type: NodePort
  ports:
    - targetPort: 8080
      port: 8080
      nodePort: 30180
  selector:
    app.kubernetes.io/name: "mediocre-app-keycloak"